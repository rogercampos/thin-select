const buildContainer = () => {
    const container = document.createElement('div');
    container.classList.add('ss-main');
    return container;
};
const buildContent = () => {
    const content = document.createElement('div');
    content.classList.add('ss-content');
    return content;
};
const buildSearch = (onSearch) => {
    const container = document.createElement('div');
    container.classList.add('ss-search');
    const input = document.createElement('input');
    const searchReturn = {
        container,
        input
    };
    input.type = 'search';
    input.tabIndex = 0;
    input.setAttribute('aria-label', "Search...");
    input.setAttribute('autocapitalize', 'off');
    input.setAttribute('autocomplete', 'off');
    input.setAttribute('autocorrect', 'off');
    input.addEventListener('input', () => {
        onSearch(input.value);
    });
    container.appendChild(input);
    return searchReturn;
};
const buildResultsList = () => {
    const list = document.createElement('div');
    list.classList.add('ss-list');
    list.setAttribute('role', 'listbox');
    return list;
};
const buildSingleSelect = (onClick) => {
    const container = document.createElement('div');
    container.classList.add('ss-single-selected');
    // Title text
    const title = document.createElement('span');
    title.classList.add('placeholder');
    container.appendChild(title);
    // Arrow
    const arrowContainer = document.createElement('span');
    arrowContainer.classList.add('ss-arrow');
    const arrowIcon = document.createElement('span');
    arrowIcon.classList.add('arrow-down');
    arrowContainer.appendChild(arrowIcon);
    container.appendChild(arrowContainer);
    container.onclick = onClick;
    return {
        container,
        title,
        arrowIcon: {
            container: arrowContainer,
            arrow: arrowIcon
        }
    };
};
const generateOption = (option, onOptionSelect) => {
    const optionEl = document.createElement('div');
    optionEl.classList.add('ss-option');
    optionEl.setAttribute('role', 'option');
    optionEl.addEventListener('click', () => {
        onOptionSelect(option);
    });
    if (option.selected) {
        optionEl.classList.add('ss-option-selected');
    }
    if (option.innerHtml) {
        optionEl.innerHTML = option.innerHtml;
    }
    else {
        optionEl.innerText = option.text || '\xa0';
    }
    return optionEl;
};

class View {
    container;
    content;
    search;
    list;
    singleSelected;
    onSearch;
    onClose;
    onOpen;
    onOptionSelect;
    isMultiple;
    isOpened;
    element;
    originalElementDisplay;
    onDocumentClick = (e) => {
        if (this.isOpened && this.singleSelected &&
            e.target !== this.singleSelected.title &&
            e.target !== this.singleSelected.arrowIcon.container &&
            e.target !== this.singleSelected.arrowIcon.arrow &&
            e.target !== this.singleSelected.container) {
            this.onClose();
        }
    };
    constructor(el, isMultiple, onSearch, onOptionSelect, onClose, onOpen) {
        this.element = el;
        this.originalElementDisplay = el.style.display;
        this.onSearch = onSearch;
        this.onOptionSelect = onOptionSelect;
        this.onClose = onClose;
        this.onOpen = onOpen;
        this.isMultiple = isMultiple;
        this.isOpened = false;
        this.container = buildContainer();
        this.content = buildContent();
        this.search = buildSearch(this.onSearch);
        this.list = buildResultsList();
        const onClick = () => {
            this.isOpened ? this.onClose() : this.onOpen();
        };
        this.singleSelected = buildSingleSelect(onClick);
        this.container.appendChild(this.singleSelected.container);
        this.container.appendChild(this.content);
        this.content.appendChild(this.search.container);
        this.content.appendChild(this.list);
        el.style.display = 'none';
        if (el.parentNode) {
            el.parentNode.insertBefore(this.container, el.nextSibling);
        }
        else {
            throw new Error('thin-select: The given select element must have a parent node');
        }
        document.addEventListener('click', this.onDocumentClick);
    }
    destroy = () => {
        this.element.style.display = this.originalElementDisplay;
        document.removeEventListener('click', this.onDocumentClick);
        if (this.element.parentElement) {
            this.element.parentElement.removeChild(this.container);
        }
    };
    openPanel = () => {
        this.isOpened = true;
        if (this.singleSelected) {
            this.singleSelected.arrowIcon.arrow.classList.remove('arrow-down');
            this.singleSelected.arrowIcon.arrow.classList.add('arrow-up');
            this.singleSelected.container.classList.add('ss-open-below');
        }
        this.content.classList.add('ss-open');
        // setTimeout is for animation completion
        setTimeout(() => {
            this.search.input.focus();
        }, 100);
    };
    closePanel = () => {
        this.isOpened = false;
        this.search.input.value = '';
        if (this.singleSelected) {
            this.singleSelected.container.classList.remove('ss-open-above');
            this.singleSelected.container.classList.remove('ss-open-below');
            this.singleSelected.arrowIcon.arrow.classList.add('arrow-down');
            this.singleSelected.arrowIcon.arrow.classList.remove('arrow-up');
        }
        this.content.classList.remove('ss-open');
    };
    setSelected = (option) => {
        if (this.singleSelected) {
            this.singleSelected.title.innerText = option.text;
        }
        Array.from(this.element.options).forEach((o) => {
            if (o.value === option.value) {
                o.selected = true;
            }
            else {
                o.selected = false;
            }
        });
    };
    setDisplayList = (options) => {
        this.list.innerHTML = '';
        options.forEach((option) => this.list.appendChild(generateOption(option, this.onOptionSelect)));
    };
    setElementOptions = (options) => {
        this.element.innerHTML = '';
        options.forEach((option) => {
            const opt = document.createElement('option');
            opt.value = option.value;
            opt.innerText = option.text;
            opt.selected = option.selected;
            this.element.appendChild(opt);
        });
    };
}

class SelectParser {
    el;
    constructor(el) {
        if (!(el instanceof HTMLSelectElement)) {
            throw new Error('thin-select: "select" dom element must be an HTMLSelectElement');
        }
        this.el = el;
    }
    analyze() {
        const isMultiple = this.el.multiple;
        const options = [];
        Array.from(this.el.options).forEach((option) => {
            options.push({ value: option.value, text: option.text, selected: option.selected });
        });
        let defaultOption;
        options.forEach(option => {
            if (option.selected) {
                defaultOption = option;
            }
        });
        defaultOption = defaultOption || options[0];
        return ({
            isMultiple,
            options,
            defaultOption
        });
    }
}

class ThinSelect {
    view;
    displayedOptionsList;
    isSearching;
    ajax;
    constructor(params) {
        const el = typeof (params.select) === "string" ? document.querySelector(params.select) : params.select;
        const initialSelectInfo = (new SelectParser(el)).analyze();
        this.isSearching = false;
        this.view = new View(el, initialSelectInfo.isMultiple, this.onSearch, this.onOptionSelect, this.closePanel, this.openPanel);
        this.displayedOptionsList = initialSelectInfo.options;
        this.view.setDisplayList(this.displayedOptionsList);
        this.view.setSelected(initialSelectInfo.defaultOption);
        this.ajax = params.ajax;
    }
    destroy = () => {
        this.view.destroy();
    };
    onSearch = (text) => {
        this.isSearching = true;
        if (this.ajax) {
            this.ajax(text, (data) => {
                this.displayedOptionsList = data;
                this.view.setElementOptions(data);
                this.view.setDisplayList(data);
            });
        }
        else {
            const matchedOptions = this.displayedOptionsList.filter(option => this.searchFilter(option.text, text));
            this.view.setDisplayList(matchedOptions);
        }
    };
    closePanel = () => {
        this.view.closePanel();
        setTimeout(() => {
            this.view.setDisplayList(this.displayedOptionsList);
        }, 100);
        this.isSearching = false;
    };
    openPanel = () => {
        this.view.openPanel();
    };
    onOptionSelect = (option) => {
        this.displayedOptionsList.forEach((x) => {
            if (x.value === option.value) {
                x.selected = true;
            }
            else {
                x.selected = false;
            }
        });
        this.view.setSelected(option);
        this.closePanel();
    };
    searchFilter = (optionText, inputText) => {
        return optionText.toLowerCase().indexOf(inputText.toLowerCase()) !== -1;
    };
}

export { ThinSelect as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
