class DomBuilder {
    container;
    content;
    search;
    list;
    singleSelected;
    onSearch;
    onDeselect;
    onClose;
    onOpen;
    onOptionSelect;
    isMultiple;
    isOpened;
    element;
    constructor(el, id, isMultiple, onSearch, onOptionSelect, onDeselect, onClose, onOpen) {
        this.element = el;
        this.onSearch = onSearch;
        this.onDeselect = onDeselect;
        this.onOptionSelect = onOptionSelect;
        this.onClose = onClose;
        this.onOpen = onOpen;
        this.isMultiple = isMultiple;
        this.isOpened = false;
        this.container = document.createElement('div');
        this.container.id = id;
        this.container.classList.add('ss-main');
        this.content = document.createElement('div');
        this.content.classList.add('ss-content');
        this.search = this.#searchDiv();
        this.list = this.#listDiv();
        this.singleSelected = this.singleSelectedDiv();
        this.container.appendChild(this.singleSelected.container);
        this.container.appendChild(this.content);
        this.content.appendChild(this.search.container);
        this.content.appendChild(this.list);
        el.style.display = 'none';
        el.dataset.tsid = id;
        if (el.parentNode) {
            el.parentNode.insertBefore(this.container, el.nextSibling);
        }
        else {
            throw new Error('thin-select: The given select element must have a parent node');
        }
    }
    openPanel = () => {
        this.isOpened = true;
        if (this.singleSelected) {
            this.singleSelected.arrowIcon.arrow.classList.remove('arrow-down');
            this.singleSelected.arrowIcon.arrow.classList.add('arrow-up');
            this.singleSelected.container.classList.add('ss-open-below');
        }
        this.content.classList.add('ss-open');
        // setTimeout is for animation completion
        setTimeout(() => {
            this.search.input.focus();
        }, 100);
    };
    closePanel = () => {
        this.isOpened = false;
        this.search.input.value = '';
        if (this.singleSelected) {
            this.singleSelected.container.classList.remove('ss-open-above');
            this.singleSelected.container.classList.remove('ss-open-below');
            this.singleSelected.arrowIcon.arrow.classList.add('arrow-down');
            this.singleSelected.arrowIcon.arrow.classList.remove('arrow-up');
        }
        this.content.classList.remove('ss-open');
    };
    setDisplayList = (options) => {
        // Clear out innerHtml
        this.list.innerHTML = '';
        for (const d of options) {
            this.list.appendChild(this.#generateOption(d));
        }
    };
    #generateOption = (option) => {
        const optionEl = document.createElement('div');
        optionEl.classList.add('ss-option');
        optionEl.setAttribute('role', 'option');
        optionEl.addEventListener('click', (e) => {
            this.onOptionSelect(option);
        });
        if (option.selected) {
            optionEl.classList.add('ss-option-selected');
        }
        if (option.innerHtml) {
            optionEl.innerHTML = option.innerHtml;
        }
        else {
            optionEl.innerText = option.text || '\xa0';
        }
        return optionEl;
    };
    setSelected = (option) => {
        if (this.singleSelected) {
            this.singleSelected.placeholder.innerText = option.text;
        }
        Array.from(this.element.options).forEach((o) => {
            if (o.value === option.value) {
                o.selected = true;
            }
            else {
                o.selected = false;
            }
        });
    };
    #searchDiv() {
        const container = document.createElement('div');
        container.classList.add('ss-search');
        const input = document.createElement('input');
        document.createElement('div');
        // Setup search return object
        const searchReturn = {
            container,
            input
        };
        input.type = 'search';
        input.placeholder = "Search...";
        input.tabIndex = 0;
        input.setAttribute('aria-label', input.placeholder);
        input.setAttribute('autocapitalize', 'off');
        input.setAttribute('autocomplete', 'off');
        input.setAttribute('autocorrect', 'off');
        input.addEventListener('input', (e) => {
            this.onSearch(e.target.value);
        });
        container.appendChild(input);
        // addable.innerHTML = '+'
        // addable.onclick = (e) => {
        //   e.preventDefault()
        //   e.stopPropagation()
        //
        //   const inputValue = this.search.input.value
        //   if (inputValue.trim() === '') {
        //     this.search.input.focus();
        //     return
        //   }
        //
        //   const addableValue = this.main.addable(inputValue)
        //   let addableValueStr = ''
        //   if (!addableValue) {
        //     return
        //   }
        //
        //   if (typeof addableValue === 'object') {
        //     const validValue = validateOption(addableValue)
        //     if (validValue) {
        //       this.main.addData(addableValue)
        //       addableValueStr = (addableValue.value ? addableValue.value : addableValue.text)
        //     }
        //   } else {
        //     this.main.addData(this.main.data.newOption({
        //       text: addableValue,
        //       value: addableValue
        //     }))
        //     addableValueStr = addableValue
        //   }
        //
        //   this.main.search('')
        //   setTimeout(() => { // Temp fix to solve multi render issue
        //     this.main.set(addableValueStr, 'value', false, false)
        //   }, 100)
        //
        //   // Close it only if closeOnSelect = true
        //   if (this.main.config.closeOnSelect) {
        //     setTimeout(() => { // Give it a little padding for a better looking animation
        //       this.main.close()
        //     }, 100)
        //   }
        // }
        // container.appendChild(addable)
        //
        // searchReturn.addable = addable
        return searchReturn;
    }
    #listDiv() {
        const list = document.createElement('div');
        list.classList.add('ss-list');
        list.setAttribute('role', 'listbox');
        return list;
    }
    singleSelectedDiv() {
        const container = document.createElement('div');
        container.classList.add('ss-single-selected');
        // Placeholder text
        const placeholder = document.createElement('span');
        placeholder.classList.add('placeholder');
        container.appendChild(placeholder);
        // Deselect
        const deselect = document.createElement('span');
        deselect.innerHTML = "x";
        deselect.classList.add('ss-deselect', 'ss-hide');
        deselect.onclick = this.onDeselect;
        container.appendChild(deselect);
        // Arrow
        const arrowContainer = document.createElement('span');
        arrowContainer.classList.add('ss-arrow');
        const arrowIcon = document.createElement('span');
        arrowIcon.classList.add('arrow-down');
        arrowContainer.appendChild(arrowIcon);
        container.appendChild(arrowContainer);
        // Add onclick for main selector div
        container.onclick = () => {
            this.isOpened ? this.onClose() : this.onOpen();
        };
        return {
            container,
            placeholder,
            deselect,
            arrowIcon: {
                container: arrowContainer,
                arrow: arrowIcon
            }
        };
    }
}

class SelectParser {
    el;
    constructor(el) {
        if (!(el instanceof HTMLSelectElement)) {
            throw new Error('thin-select: "select" dom element must be an HTMLSelectElement');
        }
        this.el = el;
    }
    analyze() {
        const isMultiple = this.el.multiple;
        const options = [];
        Array.from(this.el.options).forEach((option) => {
            options.push({ value: option.value, text: option.text, selected: option.selected });
        });
        return ({
            isMultiple,
            options
        });
    }
}

class ThinSelect {
    builder;
    id;
    displayedOptionsList;
    isSearching;
    constructor(params) {
        const el = typeof (params.select) === "string" ? document.querySelector(params.select) : params.select;
        const initialSelectInfo = (new SelectParser(el)).analyze();
        this.id = 'ts-' + Math.floor(Math.random() * 100000);
        this.isSearching = false;
        this.builder = new DomBuilder(el, this.id, initialSelectInfo.isMultiple, this.onSearch, this.onOptionSelect, this.onDeselect, this.closePanel, this.openPanel);
        this.displayedOptionsList = initialSelectInfo.options;
        this.builder.setDisplayList(this.displayedOptionsList);
    }
    onSearch = (text) => {
        this.isSearching = true;
        const matchedOptions = this.displayedOptionsList.filter(option => this.searchFilter(option.text, text));
        this.builder.setDisplayList(matchedOptions);
    };
    onDeselect = () => {
        console.log(`onDeselect`);
    };
    closePanel = () => {
        this.builder.closePanel();
        setTimeout(() => {
            this.builder.setDisplayList(this.displayedOptionsList);
        }, 100);
        this.isSearching = false;
    };
    openPanel = () => {
        this.builder.openPanel();
    };
    onOptionSelect = (option) => {
        this.displayedOptionsList.forEach((x) => {
            if (x.value === option.value) {
                x.selected = true;
            }
            else {
                x.selected = false;
            }
        });
        this.builder.setSelected(option);
        this.closePanel();
    };
    searchFilter = (optionText, inputText) => {
        return optionText.toLowerCase().indexOf(inputText.toLowerCase()) !== -1;
    };
}

export { ThinSelect as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
